generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  fullName  String
  email     String   @unique
  password  String
  phone     String?  @unique
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id   String  @id @default(uuid())
  name String  @unique
  users User[]
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
}

model Product {
  id          String       @id @default(uuid())
  name        String
  description String?
  price       Decimal
  stock       Int          @default(0)
  category    Category     @relation(fields: [categoryId], references: [id])
  categoryId  String
  orders      OrderItem[]
  inventory   Inventory?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Order {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  totalAmount Decimal
  status      OrderStatus @default(PENDING)
  items       OrderItem[]
  payment     Payment?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal
}

model Payment {
  id          String       @id @default(uuid())
  order       Order        @relation(fields: [orderId], references: [id])
  orderId     String
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  amount      Decimal
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  createdAt   DateTime     @default(now())
}

model Inventory {
  id          String    @id @default(uuid())
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  quantity    Int       @default(0)
  lastUpdated DateTime  @default(now()) @updatedAt
}

model InventoryLog {
  id          String         @id @default(uuid())
  product     Product        @relation(fields: [productId], references: [id])
  productId   String
  quantityChange Int
  changeType  ChangeType
  createdAt   DateTime       @default(now())
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  CASH
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ChangeType {
  RESTOCK
  SOLD
  RETURNED
}
